@startuml

title Диграмма классов серверного приложения

package server <<Rect>> {
  class Server
}

package storage <<Rect>> {
  class Storage
  class UserAccess
  class RoleAccess
  class Role
  class User
  class FileInfo
}

package algorithm <<Rect>> {
  class Algorithm
  class Executor
  class OpEval
  class GraphNode
  class GraphNodeType
  class GraphEvalContext
  class GraphEval
}

class Server {
    HTTP-сервер
    ..
    - executor : Executor
    - storage : Storage
    --
    - on_user_authorize(login : String, password : String) : String
    - on_path_list(path: String) : Dict[]
    - on_path_fetch(path : String) : Algorithm
    - on_path_exec(path : String, args : List) : Real
    - on_path_create(path : String) : String
    - on_path_move(src : String, dst : String) : String
    - on_path_edit(path : String, algorithm : Algorithm) : String
    - on_path_remove(path : String) : String
    - handler(request : String) : String
    --
    + run(host_mask : String, port : Int)
}

Server --* Executor
Server --* Storage

class Storage {
    База данных (хранилище)
    ..
    + users : UserAccess
    + roles : RoleAccess
    --
    + open()
    + close()
    + list(path : String, context : User) : String[]
    + move(src : String, dst : String,  context : User)
    + remove(path : String,  context : User) : String[]
    + create(path : String, content : Algorithm, context : User)
    + update(path : String, content : Algorithm, context : User)
    + file_read(path : String, context : User) : Any
    + file_info(path : String, context : User) : FileInfo
}

Storage ..> FileInfo
Storage ..> Algorithm
Storage ..> User
Storage --* UserAccess
Storage --* RoleAccess

class FileInfo {
    Информация о файле
    ..
    + path : String
    + owner : String
    + shared : Bool
    + is_directory : Bool
    + can_write : Bool
    + can_read : Bool
}

class UserAccess {
    Доступ к списку пользователей
    ..
    + by_login(login : String) : User
    + by_token(token : String) : User
    + auth(login : String, password : String) : String
    + create(user : User)
    + change_password(user : User, new_password : String)
    + remove(user : User)
}

UserAccess ..> User

class RoleAccess {
    Доступ к списку ролей
    ..
    + by_owner(user : User) : Role[]
    + by_path(path : String) : Role
    + create(role : Role)
    + save(role : Role)
    + remove(role : Role)
}

RoleAccess ..> Role

class Algorithm {
    Алгоритм
    ..
    + input_spec : String[]
    + output_spec : String[]
    + source : String
}

class Role {
    Роль
    ..
    + users : User[]
    + owner : User
    + path : String
}

Role --o User

class User {
    Пользователь
    ..
    + login : String
    + password : String
    + token : String
    + token_expire : DateTime
}

class OpEval {
  Исполнитель математических выражений
  ..
  + variables : Dict
  + functions : Dict
  --
  + eval(expr : String)
}

enum GraphNodeType {
  Тип ноды
  ..
  + START
  + OP
  + IF
  + END
}

class GraphNode {
  Узел графа блок-схемы
  ..
  + type : GraphNodeType
  + op : String
  + children : GraphNode []
}

GraphNode --* GraphNodeType
GraphNode --* GraphNode

class GraphEvalContext {
  Контекст для исполнителя
  ..
  + variables : Dict
  + functions : Dict
}

class GraphEval {
  Исполнитель алгоритма,
  представленного блок-схемой
  ..
  + start : GraphNode
  + context : GraphEvalContext
  --
  + next() : Bool
}

GraphEval --o GraphNode
GraphEval --o GraphEvalContext
GraphEval ..> OpEval

class Executor {
    Исполнитель алгоритмов
    ..
    + timeout : Real
    --
    + eval(algorithm : Algorithm) : Real
}

Executor ..> Algorithm
Executor ..> GraphEval

@enduml
